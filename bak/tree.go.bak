
func (t *tree[T]) getMatchedChildrens(parent int, str string, cb func(*treeNode[T])) {
	if parent < 0 || parent >= len(t.nodes) {
		return
	}
	for i := t.nodes[parent].first; i != -1; i = t.nodes[i].next {
		if t.match != nil && t.match(str, t.nodes[i].data) {
			cb(&t.nodes[i])
		}
	}
}

func (t *tree[T]) _get(parent int, path []string, cb func(*treeNode[T])) {
	t.getMatchedChildrens(parent,
		path[0],
		func(node *treeNode[T]) {
			if len(path) == 1 { // last element
				cb(node)
			} else {
				t._get(node.index, path[1:], cb)
			}
		},
	)
}

func (t *tree[T]) get(parent *treeNode[T], path []string) (result *treeNode[T]) {
	parentIndex := 0
	if parent != nil {
		parentIndex = parent.index
	}

	t._get(parentIndex, path[:], func(node *treeNode[T]) {
		result = node
	})
	return
}

func (t *tree[T]) getAll(parent *treeNode[T], path []string) (result []*treeNode[T]) {
	parentIndex := 0
	if parent != nil {
		parentIndex = parent.index
	}

	t._get(parentIndex, path[:], func(node *treeNode[T]) {
		result = append(result, node)
	})
	return
}

func (t *tree[T]) getFirst(parent *treeNode[T], path []string, match compare[T]) (result *treeNode[T]) {
	parentIndex := 0
	if parent != nil {
		parentIndex = parent.index
	}

	stack := make([]int, len(path))
	var pathIndex int

	for pathIndex != -1 {
		var index int
		if stack[pathIndex] == 0 {
			index = t.nodes[parentIndex].first
		} else {
			index = stack[pathIndex]
		}

		//get child index
		for ; index != -1; index = t.nodes[index].next {
			if match == nil || match(path[pathIndex], t.nodes[index].data) {
				//found
				break
			}
		}

		if index == -1 {
			//not found, do back track
			stack[pathIndex] = 0
			pathIndex--
		} else {
			stack[pathIndex] = index
			pathIndex++
			if pathIndex == len(path) {
				return &t.nodes[index]
			}
		}
	}

	return nil
}


/*
	//assert tree
	newiTreeNode := func(data, index, first, last, next int) treeNode[int] {
		return treeNode[int]{
			data:  data,
			index: index,
			first: first,
			last:  last,
			next:  next,
		}
	}
	assert.Equal(t, newiTreeNode(0, 0, 1, 3, -1), iTree.nodes[0])
	assert.Equal(t, newiTreeNode(10, 1, 4, 5, 2), iTree.nodes[1])
	assert.Equal(t, newiTreeNode(20, 2, 6, 7, 3), iTree.nodes[2])
	assert.Equal(t, newiTreeNode(30, 3, 8, 9, -1), iTree.nodes[3])
	assert.Equal(t, newiTreeNode(11, 4, -1, -1, 5), iTree.nodes[4])
	assert.Equal(t, newiTreeNode(12, 5, -1, -1, -1), iTree.nodes[5])
	assert.Equal(t, newiTreeNode(21, 6, -1, -1, 7), iTree.nodes[6])
	assert.Equal(t, newiTreeNode(22, 7, -1, -1, -1), iTree.nodes[7])
	assert.Equal(t, newiTreeNode(300, 8, -1, -1, 9), iTree.nodes[8])
	assert.Equal(t, newiTreeNode(300, 9, -1, -1, -1), iTree.nodes[9])
*/